# Docker教程

## 什么是Docker

## Docker安装

### centOS安装Docker

（1）Docker 要求 CentOS 系统的内核版本高于 3.10
```bash
[root@fanling ~]$ uname -r
```

（2）yum 安装

```bash
[root@fanling ~]$ yum update
# 卸载旧版本
[root@fanling ~]$ yum remove docker  docker-common docker-selinux docker-engine
[root@fanling ~]$ yum install -y yum-utils device-mapper-persistent-data lvm2
# 设置安装源
[root@fanling ~]$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
# 查看版本
[root@fanling ~]$ yum list docker-ce --showduplicates | sort -r
# 安装
[root@fanling ~]$ yum install docker-ce
# 检查安装
[root@fanling ~]$ docker version
Client:
 Version:           18.09.7
 API version:       1.39
 Go version:        go1.10.8
 Git commit:        2d0083d
 Built:             Thu Jun 27 17:56:06 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          18.09.7
  API version:      1.39 (minimum version 1.12)
  Go version:       go1.10.8
  Git commit:       2d0083d
  Built:            Thu Jun 27 17:26:28 2019
  OS/Arch:          linux/amd64
  Experimental:     false
# 启动
[root@fanling ~]$ systemctl start docker
# 开机启动
[root@fanling ~]$ systemctl enable docker
```

## 基本操作

### 基础操作和命令

（1）镜像操作

```bash
# 下载镜像
[root@fanling ~]$ docker pull xxx
# 查看镜像
[root@fanling ~]$ docker images
```

（2）容器操作

```bash
# 查看容器
[root@fanling ~]$ docker ps
# 查看所有容器
[root@fanling ~]$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS   
# 停止容器
[root@fanling ~]$ docker stop [CONTAINER ID]
# 删除容器
[root@fanling ~]$ docker rm [CONTAINER ID]
# 启动容器
[root@fanling ~]$ docker start [CONTAINER ID]
# 端口映射
[root@fanling ~]$ docker run  -p 服务器端口:Docker端口 -d --name container-name image-name
```



（1）安装nginx

```bash
# 下载nginx
[root@fanling ~]$ docker pull nginx
[root@fanling ~]$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              719cd2e3ed04        2 weeks ago         109MB
# 运行 将80端口映射为8080，或者80:80还是原先的80端口，不可以不写。
[root@fanling ~]$ docker run -p 8080:80 -d docker.io/nginx
# 检查和访问
[root@fanling ~]$ netstat -anp | grep 8080
[root@fanling ~]$ docker ps
```

（2）运行Nginx实例-将vue项目运行在docker的nginx容器中

先新建好打包好的文件信息

在项目文件目录下新增Dockerfile

```dockerfile
FROM nginx:latest
MAINTAINER fanling <862844083@qq.com>
COPY $PWD  /usr/share/nginx/html/
```

查看镜像和运行

```bash
[root@VM_0_4_centos my-main-project]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
fanl-vue            latest              219e854f7c21        8 seconds ago       114MB
nginx               latest              f68d6e55e065        2 days ago          109MB
# -p ：配置端口映射，格式是外部访问端口：容器内端口
# -d ：后台运行
# --name : 容器名 镜像名
[root@VM_0_4_centos my-main-project]# docker run -p 80:80 -d --name fanl-vue fanl-vue
#查看启动情况
[root@VM_0_4_centos my-main-project]# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
34bb58791a3d        fanl-vue            "nginx -g 'daemon of…"   11 seconds ago      Up 11 seconds       0.0.0.0:3000->80/tcp   fanl-vue
47057b94b8f9        nginx               "nginx -g 'daemon of…"   11 minutes ago      Up 11 minutes       0.0.0.0:8080->80/tcp   youthful_mestorf
# 访问：http://148.70.186.70
# 重新编译
# 
# 删除镜像，重新开始
```

（3）运行MySQL实例



（4）运行jdk8实例

先下载对应的jdk到指定目录

编写Dockerfile

```dockerfile
FROM centos:7
MAINTAINER fanling
ADD jdk-8u211-linux-x64.tar.gz /opt/module/
ENV JAVA_HOME /opt/module/jdk1.8.0_211
ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
ENV PATH $PATH:$JAVA_HOME/bin
```

```bash
# 构建镜像
[root@VM_0_4_centos software]$ docker build -t jdk8:latest .
# 查看镜像
[root@VM_0_4_centos software]$ docker images 
# 启动镜像
[root@VM_0_4_centos software]$ docker run -d -t  --name jdk8 jdk8:latest
# 进入容器
[root@VM_0_4_centos software]$ docker exec -it jdk8 /bin/bash
# 检查版本
[root@994d6936e87d /]$ java -version
```

（4）运行SpringBoot实例

```bash
# 先安装jdk8

```





